// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NewTurnBroadcast.proto

package org.redstone.protobuf.msg;

/**
 * Protobuf type {@code org.redstone.protobuf.msg.ChessRow}
 */
public  final class ChessRow extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:org.redstone.protobuf.msg.ChessRow)
    ChessRowOrBuilder {
  // Use ChessRow.newBuilder() to construct.
  private ChessRow(com.google.protobuf.GeneratedMessage.Builder builder) {
    super(builder);
  }
  private ChessRow() {
    types_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ChessRow(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFields,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 8: {
            int rawValue = input.readEnum();
            org.redstone.protobuf.msg.Enums.ChessType value = org.redstone.protobuf.msg.Enums.ChessType.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(1, rawValue);
            } else {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                types_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              types_.add(rawValue);
            }
            break;
          }
          case 10: {
            int length = input.readRawVarint32();
            int oldLimit = input.pushLimit(length);
            while(input.getBytesUntilLimit() > 0) {
              int rawValue = input.readEnum();
              org.redstone.protobuf.msg.Enums.ChessType value = org.redstone.protobuf.msg.Enums.ChessType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                  types_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000001;
                }
                types_.add(rawValue);
              }
            }
            input.popLimit(oldLimit);
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
        types_ = java.util.Collections.unmodifiableList(types_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.redstone.protobuf.msg.NewTurnBroadcastOuterClass.internal_static_org_redstone_protobuf_msg_ChessRow_descriptor;
  }

  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.redstone.protobuf.msg.NewTurnBroadcastOuterClass.internal_static_org_redstone_protobuf_msg_ChessRow_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.redstone.protobuf.msg.ChessRow.class, org.redstone.protobuf.msg.ChessRow.Builder.class);
  }

  public static final com.google.protobuf.Parser<ChessRow> PARSER =
      new com.google.protobuf.AbstractParser<ChessRow>() {
    public ChessRow parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ChessRow(input, extensionRegistry);
    }
  };

  @java.lang.Override
  public com.google.protobuf.Parser<ChessRow> getParserForType() {
    return PARSER;
  }

  public static final int TYPES_FIELD_NUMBER = 1;
  private java.util.List<java.lang.Integer> types_;
  private static final com.google.protobuf.Internal.ListAdapter.Converter<
      java.lang.Integer, org.redstone.protobuf.msg.Enums.ChessType> types_converter_ =
          new com.google.protobuf.Internal.ListAdapter.Converter<
              java.lang.Integer, org.redstone.protobuf.msg.Enums.ChessType>() {
            public org.redstone.protobuf.msg.Enums.ChessType convert(java.lang.Integer from) {
              org.redstone.protobuf.msg.Enums.ChessType result = org.redstone.protobuf.msg.Enums.ChessType.valueOf(from);
              return result == null ? org.redstone.protobuf.msg.Enums.ChessType.None : result;
            }
          };
  /**
   * <code>repeated .org.redstone.protobuf.msg.Enums.ChessType types = 1;</code>
   */
  public java.util.List<org.redstone.protobuf.msg.Enums.ChessType> getTypesList() {
    return new com.google.protobuf.Internal.ListAdapter<
        java.lang.Integer, org.redstone.protobuf.msg.Enums.ChessType>(types_, types_converter_);
  }
  /**
   * <code>repeated .org.redstone.protobuf.msg.Enums.ChessType types = 1;</code>
   */
  public int getTypesCount() {
    return types_.size();
  }
  /**
   * <code>repeated .org.redstone.protobuf.msg.Enums.ChessType types = 1;</code>
   */
  public org.redstone.protobuf.msg.Enums.ChessType getTypes(int index) {
    return types_converter_.convert(types_.get(index));
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    for (int i = 0; i < types_.size(); i++) {
      output.writeEnum(1, types_.get(i));
    }
    unknownFields.writeTo(output);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      for (int i = 0; i < types_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeEnumSizeNoTag(types_.get(i));
      }
      size += dataSize;
      size += 1 * types_.size();
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  public static org.redstone.protobuf.msg.ChessRow parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.redstone.protobuf.msg.ChessRow parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.redstone.protobuf.msg.ChessRow parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.redstone.protobuf.msg.ChessRow parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.redstone.protobuf.msg.ChessRow parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.redstone.protobuf.msg.ChessRow parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static org.redstone.protobuf.msg.ChessRow parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static org.redstone.protobuf.msg.ChessRow parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static org.redstone.protobuf.msg.ChessRow parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.redstone.protobuf.msg.ChessRow parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return new Builder(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(org.redstone.protobuf.msg.ChessRow prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code org.redstone.protobuf.msg.ChessRow}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:org.redstone.protobuf.msg.ChessRow)
      org.redstone.protobuf.msg.ChessRowOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.redstone.protobuf.msg.NewTurnBroadcastOuterClass.internal_static_org_redstone_protobuf_msg_ChessRow_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.redstone.protobuf.msg.NewTurnBroadcastOuterClass.internal_static_org_redstone_protobuf_msg_ChessRow_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.redstone.protobuf.msg.ChessRow.class, org.redstone.protobuf.msg.ChessRow.Builder.class);
    }

    // Construct using org.redstone.protobuf.msg.ChessRow.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      types_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.redstone.protobuf.msg.NewTurnBroadcastOuterClass.internal_static_org_redstone_protobuf_msg_ChessRow_descriptor;
    }

    public org.redstone.protobuf.msg.ChessRow getDefaultInstanceForType() {
      return org.redstone.protobuf.msg.ChessRow.getDefaultInstance();
    }

    public org.redstone.protobuf.msg.ChessRow build() {
      org.redstone.protobuf.msg.ChessRow result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public org.redstone.protobuf.msg.ChessRow buildPartial() {
      org.redstone.protobuf.msg.ChessRow result = new org.redstone.protobuf.msg.ChessRow(this);
      int from_bitField0_ = bitField0_;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        types_ = java.util.Collections.unmodifiableList(types_);
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.types_ = types_;
      onBuilt();
      return result;
    }

    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.redstone.protobuf.msg.ChessRow) {
        return mergeFrom((org.redstone.protobuf.msg.ChessRow)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.redstone.protobuf.msg.ChessRow other) {
      if (other == org.redstone.protobuf.msg.ChessRow.getDefaultInstance()) return this;
      if (!other.types_.isEmpty()) {
        if (types_.isEmpty()) {
          types_ = other.types_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureTypesIsMutable();
          types_.addAll(other.types_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.redstone.protobuf.msg.ChessRow parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.redstone.protobuf.msg.ChessRow) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<java.lang.Integer> types_ =
      java.util.Collections.emptyList();
    private void ensureTypesIsMutable() {
      if (!((bitField0_ & 0x00000001) == 0x00000001)) {
        types_ = new java.util.ArrayList<java.lang.Integer>(types_);
        bitField0_ |= 0x00000001;
      }
    }
    /**
     * <code>repeated .org.redstone.protobuf.msg.Enums.ChessType types = 1;</code>
     */
    public java.util.List<org.redstone.protobuf.msg.Enums.ChessType> getTypesList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, org.redstone.protobuf.msg.Enums.ChessType>(types_, types_converter_);
    }
    /**
     * <code>repeated .org.redstone.protobuf.msg.Enums.ChessType types = 1;</code>
     */
    public int getTypesCount() {
      return types_.size();
    }
    /**
     * <code>repeated .org.redstone.protobuf.msg.Enums.ChessType types = 1;</code>
     */
    public org.redstone.protobuf.msg.Enums.ChessType getTypes(int index) {
      return types_converter_.convert(types_.get(index));
    }
    /**
     * <code>repeated .org.redstone.protobuf.msg.Enums.ChessType types = 1;</code>
     */
    public Builder setTypes(
        int index, org.redstone.protobuf.msg.Enums.ChessType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureTypesIsMutable();
      types_.set(index, value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <code>repeated .org.redstone.protobuf.msg.Enums.ChessType types = 1;</code>
     */
    public Builder addTypes(org.redstone.protobuf.msg.Enums.ChessType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureTypesIsMutable();
      types_.add(value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <code>repeated .org.redstone.protobuf.msg.Enums.ChessType types = 1;</code>
     */
    public Builder addAllTypes(
        java.lang.Iterable<? extends org.redstone.protobuf.msg.Enums.ChessType> values) {
      ensureTypesIsMutable();
      for (org.redstone.protobuf.msg.Enums.ChessType value : values) {
        types_.add(value.getNumber());
      }
      onChanged();
      return this;
    }
    /**
     * <code>repeated .org.redstone.protobuf.msg.Enums.ChessType types = 1;</code>
     */
    public Builder clearTypes() {
      types_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.redstone.protobuf.msg.ChessRow)
  }

  // @@protoc_insertion_point(class_scope:org.redstone.protobuf.msg.ChessRow)
  private static final org.redstone.protobuf.msg.ChessRow defaultInstance;static {
    defaultInstance = new org.redstone.protobuf.msg.ChessRow();
  }

  public static org.redstone.protobuf.msg.ChessRow getDefaultInstance() {
    return defaultInstance;
  }

  public org.redstone.protobuf.msg.ChessRow getDefaultInstanceForType() {
    return defaultInstance;
  }

}

